# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-iot-sensor-gateway
# app and org for use with dashboard.serverless.com
app: aws-iot-sensors
org: drewbasedata
configValidationMode: error

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'
plugins:
  - serverless-plugin-aws-alerts

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221

# you can overwrite defaults here
  stage: dev
  region: us-east-2
  profile: basedata

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "cloudwatch:DescribeAlarms"
      Resource: "arn:aws:cloudwatch:us-east-2:853166164242:alarm:*"
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  DailySummary:
    handler: summary_handler.run
    environment:
      alert_email_sender: drew@basedata.solutions
      alert_email_recipient: drew@beauprefamily.org
      alert_email_subject: Moisture Sensor Alert Summary
      debug: True
    events:
      - schedule: cron(0 8 * * ? *)

  SensorAlert:
    handler: alert_handler.run
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    environment:
      alert_email_sender: drew@basedata.solutions
      alert_email_recipient: drew@beauprefamily.org
      alert_email_subject: Moisture Alert
      debug: True
    events:
      - sns: ${self:service}-${self:provider.stage}-alerts
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here

# you can add CloudFormation resource templates here
resources:
 Resources:
   MoistureAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Moisture Sensor 1 Alert
      AlarmDescription: Soil Moisture Alerts
      Namespace: SensorRules
      MetricName: SensorRuleMoisture
      Statistic: Average
      Threshold: ${self:custom.thresholds.default}
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 1
      Period: 900
      ActionsEnabled: True
      OKActions: 
        - "arn:aws:sns:us-east-2:853166164242:${self:service}-${self:custom.stage}-alerts"
      AlarmActions: 
        - "arn:aws:sns:us-east-2:853166164242:${self:service}-${self:custom.stage}-alerts"
      InsufficientDataActions: 
        - "arn:aws:sns:us-east-2:853166164242:${self:service}-${self:custom.stage}-alerts"
   MoistureAlert2:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Moisture Sensor 2 Alert
      AlarmDescription: Soil Moisture Alerts for Sensor 2
      Namespace: SensorRules
      MetricName: SensorRuleMoisture2
      Statistic: Average
      Threshold: ${self:custom.thresholds.default}
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 1
      Period: 900
      ActionsEnabled: True
      OKActions: 
        - "arn:aws:sns:us-east-2:853166164242:${self:service}-${self:custom.stage}-alerts"
      AlarmActions: 
        - "arn:aws:sns:us-east-2:853166164242:${self:service}-${self:custom.stage}-alerts"
      InsufficientDataActions: 
        - "arn:aws:sns:us-east-2:853166164242:${self:service}-${self:custom.stage}-alerts"
      # Dimensions:
      #   - Name: ApiName
      #     Value:
      #       Fn::Join:
      #         - "-"
      #         -
      #           - Ref: ApiGatewayStage
      #           - ${self:service}
      #   - Name: Stage
      #     Value:
      #       Ref: ApiGatewayStage  
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
custom:
  accountId: !Ref AWS::AccountId
  stage: ${opt:stage, self:provider.stage}
  thresholds:
    default: 30
  alerts:
    stages:
      - production
      - staging
      - dev
    nameTemplate: $[functionName]-$[metricName]-Alarm # Optionally - naming template for alarms, can be overwritten in definitions
    prefixTemplate: $[stackName] # Optionally - override the alarm name prefix

    definitions:  # these defaults are merged with your definitions
      functionErrors:
        period: 300 # override period
     
    alarms:
      - functionErrors
      - functionThrottles

